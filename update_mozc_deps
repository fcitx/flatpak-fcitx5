#!/bin/bash

BASE=$PWD
pushd .
if [ ! -d mozc ]; then
    git clone --filter=tree:0 https://github.com/fcitx/mozc/
fi

cd mozc/src/
git fetch --all
git checkout origin/fcitx
git restore .
git submodule update --init

set -e

_MOZC_BAZEL_CACHE=/tmp/mozc_cache

BUILD_TARGET="unix/fcitx5:fcitx5-mozc.so server:mozc_server gui/tool:mozc_tool"
bazel clean --expunge
bazel build --nobuild --experimental_repository_resolved_file=resolved.bzl --repository_cache="$_MOZC_BAZEL_CACHE" --config oss_linux --config release_build $BUILD_TARGET

cp -a resolved.bzl $_MOZC_BAZEL_CACHE

pushd .
cd $_MOZC_BAZEL_CACHE

function UpdateSha256() {
	local url=$1
	local new_hash=$2
	jq '
	def update_sha256(update_url; new_hash):
	walk(
	if type == "object" and .attributes.url == update_url then
		.attributes.sha256 = new_hash
	elif type == "object" and .attributes.urls[0] == update_url then
		.attributes.sha256 = new_hash
	elif type == "object" and .attributes.urls[1] == update_url then
		.attributes.sha256 = new_hash
	else
		.
	end
	);

	update_sha256("'$url'" ; "'$new_hash'")
	' resolved.json > resolved.tmp
	cp -a resolved.tmp resolved.json
	sync
}

sed -e 's/^resolved = //' -e 's/ False/ "False"/g' -e 's/ None/ "None"/g' -i resolved.bzl
cp resolved.bzl resolved.json
urls=$(jq -r -f $BASE/resolved.jq resolved.bzl |jq -r ".[].url")

for f in $(find $_MOZC_BAZEL_CACHE -name "id-*");
do
       files+="$(file $(dirname $f)/file)""\n"
done
zipfiles=$(echo -e $files|grep Zip|cut -f1 -d" "|sed "s/:$//")
for f in $zipfiles;
do
       zipfiles_info+="$(unzip -l $f)"
done
tarfiles=$(echo -e $files|grep -E "gzip|tar|xz|bzip"|cut -f1 -d" "|sed "s/:$//")
for f in $tarfiles;
do
	tarfiles_info+="$(echo $f) $(tar -tf $f)"
done

for url in $urls
do
       filename=$(basename $url)
       sha=$(jq -r -f $BASE/resolved.jq resolved.json | jq -r '.[]|select(.url=="'$url'")|.sha256')
       if [[ -z "$sha" ]]; then
               strip_name="${filename%"${filename##*[0-9]}"}"
               [[ -z $strip_name ]] && strip_name=${filename%.*}
               #[[ -n $strip_name ]] && strip_name=${strip_name%-*}
               if [[ -n $strip_name ]];then
                       sha=$(echo -e "$files"|grep "$strip_name"|cut -f1 -d" ")
                       if [[ -n "$sha" ]];then
                               sha=$(basename $(dirname $sha))
                       else
			       sha=$(echo -e "$zipfiles_info"|grep -i -B3 $strip_name || true)
			       sha=$(echo -e $sha|awk '{FS=" "}{print $4}')
			       if [[ -z "$sha" ]];then
				       sha=$(echo -e "$tarfiles_info"|grep -i $strip_name || true)
				       sha=$(echo $sha |grep -o "content_addressable/sha256/[^ ]*"|head -n1)
				       if [[ -n "$sha" ]]; then
					       sha=${sha%/*}
					       sha=${sha##*/}
				       else
					       sha=""
				       fi
			       else
				       sha=$(basename $(dirname $sha))
			       fi
		       fi
	       else
		       sha=""
	       fi
       fi
       if [[ -z $sha || $(echo $sha|wc -c) != 65 ]];then
	       sha=""
	       wget -nc $url && sha=$(sha256sum $filename|cut -f1 -d" ")
       fi
       [[ -n $sha ]] && UpdateSha256 $url $sha
       sha=""
done

jq -r -f $BASE/resolved.jq resolved.json| yq -y > $BASE/mozc-deps.yaml
popd

yq -y -i 'sort_by(.url)' $BASE/mozc-deps.yaml

rm -rf $_MOZC_BAZEL_CACHE

popd
$BASE/update_mozc_zip_code_patch
